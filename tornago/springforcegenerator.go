package tornago

import (
	"github.com/luxengine/lux/glm"
)

// SpringForceGenerator is a generator to simulate spring like objects
type SpringForceGenerator struct {
	localPoint, otherPoint glm.Vec3
	other                  *RigidBody
	k, l                   float32
}

// NewSpringForceGenerator return a new SpringForceGenerator based on the given
// information. both points are in local space.
func NewSpringForceGenerator(localPoint *glm.Vec3, other *RigidBody, otherPoint *glm.Vec3, k, l float32) SpringForceGenerator {
	return SpringForceGenerator{
		localPoint: *localPoint,
		otherPoint: *otherPoint,
		other:      other,
		k:          k,
		l:          l,
	}
}

// SpringConstant returns the spring constant.
func (g *SpringForceGenerator) SpringConstant() float32 {
	return g.k
}

// SetSpringConstant sets the spring constant.
func (g *SpringForceGenerator) SetSpringConstant(k float32) {
	g.k = k
}

// RestLength returns the rest length.
func (g *SpringForceGenerator) RestLength() float32 {
	return g.l
}

// SetRestLength sets the rest length.
func (g *SpringForceGenerator) SetRestLength(l float32) {
	g.l = l
}

// TargetRigidBody returns the rigid body that this spring follows".
func (g *SpringForceGenerator) TargetRigidBody() *RigidBody {
	return g.other
}

// SetTargetRigidBody sets the rigid body this force generator follows.
func (g *SpringForceGenerator) SetTargetRigidBody(other *RigidBody) {
	g.other = other
}

// SetLocalPoint3f sets the local point for the spring.
func (g *SpringForceGenerator) SetLocalPoint3f(x, y, z float32) {
	g.localPoint = glm.Vec3{X: x, Y: y, Z: z}
}

// SetLocalPointVec sets the local point for the spring.
func (g *SpringForceGenerator) SetLocalPointVec(p *glm.Vec3) {
	g.localPoint = *p
}

// LocalPoint returns the local point.
func (g *SpringForceGenerator) LocalPoint() glm.Vec3 {
	return g.localPoint
}

// SetOtherPoint3f sets the point of the target rigid body that this spring is
// attached to.
func (g *SpringForceGenerator) SetOtherPoint3f(x, y, z float32) {
	g.otherPoint = glm.Vec3{X: x, Y: y, Z: z}
}

// SetOtherPointVec sets the point of the target rigid body that this spring is
// attached to.
func (g *SpringForceGenerator) SetOtherPointVec(p *glm.Vec3) {
	g.otherPoint = *p
}

// OtherPoint returns the point of the target rigid body that this spring is
// attached to.
func (g *SpringForceGenerator) OtherPoint() glm.Vec3 {
	return g.otherPoint
}

// UpdateForce applies the force generated by the spring to both particles.
func (g *SpringForceGenerator) UpdateForce(b *RigidBody, duration float32) {
	if !b.HasFiniteMass() {
		return
	}

	var lws glm.Vec3
	b.PointInWorldCoordinates(&g.localPoint, &lws)

	var ows glm.Vec3
	g.other.PointInWorldCoordinates(&g.otherPoint, &ows)

	var force glm.Vec3
	force.SubOf(&lws, &ows)

	mag := force.Len()
	mag = mag - g.l
	mag *= g.k

	force.Normalize()
	force.MulWith(-mag)

	b.AddForceAtPoint(&force, &lws)
}
