package steam

/*
#cgo CFLAGS: -Ih
#cgo linux LDFLAGS: -Llib -lsteam_capi -lsteam_api
#cgo darwin LDFLAGS: -Llib -lsteam_capi
#include <steam_capi.h>
#include <stdlib.h>
*/
import "C"

import (
	"unsafe"
)

type IGameServer struct {
	unsafe.Pointer
}

/// This is called by SteamGameServer_Init, and you will usually not need to call it directly
func (g IGameServer) InitGameServer(unIP uint32, usGamePort uint16, usQueryPort uint16, unFlags uint32, nGameAppId AppId, pchVersionString string) bool {
	return bool(C.ISteamGameServer_InitGameServer(g.Pointer, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString))
}
/// Game product identifier.  This is currently used by the master server for version checking purposes.
/// It's a required field, but will eventually will go away, and the AppID will be used for this purpose.
func (g IGameServer) SetProduct(pszProduct string) {
	return C.ISteamGameServer_SetProduct(g.Pointer, pszProduct)
}

/// Description of the game.  This is a required field and is displayed in the steam server browser....for now.
/// This is a required field, but it will go away eventually, as the data should be determined from the AppID.	
func (g IGameServer) SetGameDescription(pszGameDescription string) {
	return C.ISteamGameServer_SetGameDescription(g.Pointer, pszGameDescription)
}

/// If your game is a "mod," pass the string that identifies it.  The default is an empty string, meaning
/// this application is the original game, not a mod.
///
/// @see k_cbMaxGameServerGameDir
func (g IGameServer) SetModDir(pszModDir string) {
	return C.ISteamGameServer_SetModDir(g.Pointer, pszModDir)
}

/// Is this is a dedicated server?  The default value is false.
func (g IGameServer) SetDedicatedServer(bDedicated bool) {
	return C.ISteamGameServer_SetDedicatedServer(g.Pointer, bDedicated)
}


/// Begin process to login to a persistent game server account
///
/// You need to register for callbacks to determine the result of this operation.
/// @see SteamServersConnected_t
/// @see SteamServerConnectFailure_t
/// @see SteamServersDisconnected_t
func (g IGameServer) LogOn(pszToken string) {
	return C.ISteamGameServer_LogOn(g.Pointer, pszToken)
}

/// Login to a generic, anonymous account.
///
/// Note: in previous versions of the SDK, this was automatically called within SteamGameServer_Init,
/// but this is no longer the case.
func (g IGameServer) LogOnAnonymous() {
	return C.ISteamGameServer_LogOnAnonymous(g.Pointer)
}

/// Begin process of logging game server out of steam
func (g IGameServer) LogOff() {
	return C.ISteamGameServer_LogOff(g.Pointer)
}

// status functions

func (g IGameServer) BLoggedOn() bool {
	return bool(C.ISteamGameServer_BLoggedOn(g.Pointer))
}

func (g IGameServer) BSecure() bool {
	return bool(C.ISteamGameServer_BSecure(g.Pointer))
}

func (g IGameServer) GetSteamID() CSteamID {
	return CSteamID(C.ISteamGameServer_GetSteamID(g.Pointer))
}

/// Returns true if the master server has requested a restart.
/// Only returns true once per request.
func (g IGameServer) WasRestartRequested() bool {
	return bool(C.ISteamGameServer_WasRestartRequested(g.Pointer))
}

/// Max player count that will be reported to server browser and client queries
func (g IGameServer) SetMaxPlayerCount(cPlayersMax int) {
	return C.ISteamGameServer_SetMaxPlayerCount(g.Pointer, cPlayersMax)
}

/// Number of bots.  Default value is zero
func (g IGameServer) SetBotPlayerCount(cBotplayers int) {
	return C.ISteamGameServer_SetBotPlayerCount(g.Pointer, cBotplayers)
}

/// Set the name of server as it will appear in the server browser
///
/// @see k_cbMaxGameServerName
func (g IGameServer) SetServerName(pszServerName string) {
	return C.ISteamGameServer_SetServerName(g.Pointer, pszServerName)
}

/// Set name of map to report in the server browser
///
/// @see k_cbMaxGameServerName
func (g IGameServer) SetMapName(pszMapName string) {
	return C.ISteamGameServer_SetMapName(g.Pointer, pszMapName)
}

/// Let people know if your server will require a password
func (g IGameServer) SetPasswordProtected(bPasswordProtected bool) {
	return C.ISteamGameServer_SetPasswordProtected(g.Pointer, bPasswordProtected)
}

/// Spectator server.  The default value is zero, meaning the service
/// is not used.
func (g IGameServer) SetSpectatorPort(unSpectatorPort uint16) {
	return C.ISteamGameServer_SetSpectatorPort(g.Pointer, unSpectatorPort)
}

/// Name of the spectator server.  (Only used if spectator port is nonzero.)
///
/// @see k_cbMaxGameServerMapName
func (g IGameServer) SetSpectatorServerName(pszSpectatorServerName string) {
	return C.ISteamGameServer_SetSpectatorServerName(g.Pointer, pszSpectatorServerName)
}

/// Call this to clear the whole list of key/values that are sent in rules queries.
func (g IGameServer) ClearAllKeyValues() {
	return C.ISteamGameServer_ClearAllKeyValues(g.Pointer)
}

/// Call this to add/update a key/value pair.
func (g IGameServer) SetKeyValue(pKey string, pValue string) {
	return C.ISteamGameServer_SetKeyValue(g.Pointer, pKey, pValue)
}

/// Sets a string defining the "gametags" for this server, this is optional, but if it is set
/// it allows users to filter in the matchmaking/server-browser interfaces based on the value
///
/// @see k_cbMaxGameServerTags
func (g IGameServer) SetGameTags(pchGameTags string) {
	return C.ISteamGameServer_SetGameTags(g.Pointer, pchGameTags)
}

/// Sets a string defining the "gamedata" for this server, this is optional, but if it is set
/// it allows users to filter in the matchmaking/server-browser interfaces based on the value
/// don't set this unless it actually changes, its only uploaded to the master once (when
/// acknowledged)
///
/// @see k_cbMaxGameServerGameData
func (g IGameServer) SetGameData(pchGameData string) {
	return C.ISteamGameServer_SetGameData(g.Pointer, pchGameData)
}

/// Region identifier.  This is an optional field, the default value is empty, meaning the "world" region
func (g IGameServer) SetRegion(pszRegion string) {
	return C.ISteamGameServer_SetRegion(g.Pointer, pszRegion)
}

// Handles receiving a new connection from a Steam user.  This call will ask the Steam
// servers to validate the users identity, app ownership, and VAC status.  If the Steam servers 
// are off-line, then it will validate the cached ticket itself which will validate app ownership 
// and identity.  The AuthBlob here should be acquired on the game client using SteamUser()->InitiateGameConnection()
// and must then be sent up to the game server for authentication.
//
// Return Value: returns true if the users ticket passes basic checks. pSteamIDUser will contain the Steam ID of this user. pSteamIDUser must NOT be NULL
// If the call succeeds then you should expect a GSClientApprove_t or GSClientDeny_t callback which will tell you whether authentication
// for the user has succeeded or failed (the steamid in the callback will match the one returned by this call)
func (g IGameServer) SendUserConnectAndAuthenticate(unIPClient uint32, pvAuthBlob unsafe.Pointer, cubAuthBlobSize uint32, pSteamIDUser *CSteamID) bool {
	return bool(C.ISteamGameServer_SendUserConnectAndAuthenticate(g.Pointer, unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser))
}

// Creates a fake user (ie, a bot) which will be listed as playing on the server, but skips validation.  
// 
// Return Value: Returns a SteamID for the user to be tracked with, you should call HandleUserDisconnect()
// when this user leaves the server just like you would for a real user.
func (g IGameServer) CreateUnauthenticatedUserConnection() CSteamID {
	return CSteamID(C.ISteamGameServer_CreateUnauthenticatedUserConnection(g.Pointer))
}

// Should be called whenever a user leaves our game server, this lets Steam internally
// track which users are currently on which servers for the purposes of preventing a single
// account being logged into multiple servers, showing who is currently on a server, etc.
func (g IGameServer) SendUserDisconnect(steamIDUser CSteamID) {
	return C.ISteamGameServer_SendUserDisconnect(g.Pointer, steamIDUser)
}

// Update the data to be displayed in the server browser and matchmaking interfaces for a user
// currently connected to the server.  For regular users you must call this after you receive a
// GSUserValidationSuccess callback.
// 
// Return Value: true if successful, false if failure (ie, steamIDUser wasn't for an active player)
func (g IGameServer) BUpdateUserData(steamIDUser CSteamID, pchPlayerName string, uScore uint32) bool {
	return bool(C.ISteamGameServer_BUpdateUserData(g.Pointer, steamIDUser, pchPlayerName, uScore))
}

// Retrieve ticket to be sent to the entity who wishes to authenticate you ( using BeginAuthSession API ). 
// pcbTicket retrieves the length of the actual ticket.
func (g IGameServer) GetAuthSessionTicket(pTicket unsafe.Pointer, cbMaxTicket int, pcbTicket *uint32) HAuthTicket {
	return HAuthTicket(C.ISteamGameServer_GetAuthSessionTicket(g.Pointer, pTicket, cbMaxTicket, pcbTicket))
}

// Authenticate ticket ( from GetAuthSessionTicket ) from entity steamID to be sure it is valid and isnt reused
// Registers for callbacks if the entity goes offline or cancels the ticket ( see ValidateAuthTicketResponse_t callback and EAuthSessionResponse )
func (g IGameServer) BeginAuthSession(pAuthTicket unsafe.Pointer, cbAuthTicket int, steamID CSteamID) EBeginAuthSessionResult {
	return EBeginAuthSessionResult(C.ISteamGameServer_BeginAuthSession(g.Pointer, pAuthTicket, cbAuthTicket, steamID))
}

// Stop tracking started by BeginAuthSession - called when no longer playing game with this entity
func (g IGameServer) EndAuthSession(steamID CSteamID) {
	return C.ISteamGameServer_EndAuthSession(g.Pointer, steamID)
}

// Cancel auth ticket from GetAuthSessionTicket, called when no longer playing game with the entity you gave the ticket to
func (g IGameServer) CancelAuthTicket(hAuthTicket HAuthTicket) {
	return C.ISteamGameServer_CancelAuthTicket(g.Pointer, hAuthTicket)
}

// After receiving a user's authentication data, and passing it to SendUserConnectAndAuthenticate, use this function
// to determine if the user owns downloadable content specified by the provided AppID.
func (g IGameServer) UserHasLicenseForApp(steamID CSteamID, appID AppId) EUserHasLicenseForAppResult {
	return EUserHasLicenseForAppResult(C.ISteamGameServer_UserHasLicenseForApp(g.Pointer, steamID, appID))
}

// Ask if a user in in the specified group, results returns async by GSUserGroupStatus_t
// returns false if we're not connected to the steam servers and thus cannot ask
func (g IGameServer) RequestUserGroupStatus(steamIDUser CSteamID, steamIDGroup CSteamID) bool {
	return bool(C.ISteamGameServer_RequestUserGroupStatus(g.Pointer, steamIDUser, steamIDGroup))
}

// Returns the public IP of the server according to Steam, useful when the server is 
// behind NAT and you want to advertise its IP in a lobby for other clients to directly
// connect to
func (g IGameServer) GetPublicIP() uint32 {
	return C.ISteamGameServer_GetPublicIP(g.Pointer)
}

// Call this when a packet that starts with 0xFFFFFFFF comes in. That means
// it's for us.
func (g IGameServer) HandleIncomingPacket(pData unsafe.Pointer, cbData int, srcIP uint32, srcPort uint16) bool {
	return bool(C.ISteamGameServer_HandleIncomingPacket(g.Pointer, pData, cbData, srcIP, srcPort))
}

// AFTER calling HandleIncomingPacket for any packets that came in that frame, call this.
// This gets a packet that the master server updater needs to send out on UDP.
// It returns the length of the packet it wants to send, or 0 if there are no more packets to send.
// Call this each frame until it returns 0.
func (g IGameServer) GetNextOutgoingPacket(pOut unsafe.Pointer, cbMaxOut int, pNetAdr *uint32, pPort *uint16) int {
	return int(C.ISteamGameServer_GetNextOutgoingPacket(g.Pointer, pOut, cbMaxOut, pNetAdr, pPort))
}

// Call this as often as you like to tell the master server updater whether or not
// you want it to be active (default: off).
func (g IGameServer) EnableHeartbeats(bActive bool) {
	return C.ISteamGameServer_EnableHeartbeats(g.Pointer, bActive)
}

// You usually don't need to modify this.
// Pass -1 to use the default value for iHeartbeatInterval.
// Some mods change this.
func (g IGameServer) SetHeartbeatInterval(iHeartbeatInterval int) {
	return C.ISteamGameServer_SetHeartbeatInterval(g.Pointer, iHeartbeatInterval)
}

// Force a heartbeat to steam at the next opportunity
func (g IGameServer) ForceHeartbeat() {
	return C.ISteamGameServer_ForceHeartbeat(g.Pointer)
}

// associate this game server with this clan for the purposes of computing player compat
func (g IGameServer) AssociateWithClan(steamIDClan CSteamID) SteamAPICall {
	return SteamAPICall(C.ISteamGameServer_AssociateWithClan(g.Pointer, steamIDClan))
}

// ask if any of the current players dont want to play with this new player - or vice versa
func (g IGameServer) ComputeNewPlayerCompatibility(steamIDNewPlayer CSteamID) SteamAPICall {
	return SteamAPICall(C.ISteamGameServer_ComputeNewPlayerCompatibility(g.Pointer, steamIDNewPlayer))
}
